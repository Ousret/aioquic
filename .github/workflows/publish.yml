name: Continuous Delivery

on:
  workflow_dispatch:

  release:
    types:
      - created

permissions:
  contents: read

jobs:

  build-wheels:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            arch: arm64
          - os: macos-latest
            arch: x86_64
          - os: ubuntu-latest
            arch: i686
          - os: ubuntu-latest
            arch: x86_64
          - os: ubuntu-latest
            arch: aarch64
          - os: windows-latest
            arch: AMD64
          - os: windows-latest
            arch: x86
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'true'
      - uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - name: Install QEMU
        if: matrix.os == 'ubuntu-latest'
        uses: docker/setup-qemu-action@v2
      - name: Build wheels
        env:
          CIBW_BUILD_FRONTEND: build
          CIBW_ARCHS: ${{ matrix.arch }}
          CIBW_ENVIRONMENT: AIOQUIC_SKIP_TESTS=ipv6,loss
          CIBW_BUILD: cp39-* pp310-* pp39-* pp38-*
          CIBW_TEST_COMMAND: python -m unittest discover -t {project} -s {project}/tests
          # there are no wheels for cryptography on these platforms
          CIBW_TEST_SKIP: "*-{manylinux_i686,win32} pp* *-musllinux*"
        run: |
          pip install cibuildwheel
          cibuildwheel --output-dir dist
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'true'
      - uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - name: Install requirements
        run: python -m pip install build
      - name: Create SDIST
        run: python -m build --sdist
      - name: Upload sdist
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist

  checksum:
    name: Compute hashes
    runs-on: ubuntu-latest
    needs:
      - build-wheels
      - sdist
    outputs:
      hashes: ${{ steps.compute.outputs.hashes }}
    steps:
      - uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 # v4.1.0
      - name: Download distributions
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
        with:
          name: dist
          path: dist
      - name: Collected dists
        run: |
          tree dist
      - name: Generate hashes
        id: compute  #  needs.checksum.outputs.hashes
        working-directory: ./dist
        run: echo "hashes=$(sha256sum * | base64 -w0)" >> $GITHUB_OUTPUT

  provenance:
    needs: checksum
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.9.0
    permissions:
      actions: read
      id-token: write
      contents: write
    with:
      base64-subjects: ${{ needs.checksum.outputs.hashes }}
      upload-assets: true

  deploy:
    name: ðŸš€ Deploy to PyPi
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      id-token: write
      contents: write
    needs: provenance
    environment:
      name: pypi
      url: https://pypi.org/project/qh3
    steps:
      - uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 # v4.1.0
      - name: Download distributions
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
        with:
          name: dist
          path: dist
      - name: Collected dists
        run: |
          tree dist
      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@b7f401de30cb6434a1e19f805ff006643653240e # release/v1
      - name: Upload dists to GitHub Release
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        run: |
          gh release upload ${{ github.ref_name }} dist/* --repo ${{ github.repository }}
