name: tests

on:
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'true'
      - uses: actions/setup-python@v4
        with:
          python-version: 3.7
      - name: Build documentation
        env:
          READTHEDOCS: "True"
        run: |
          pip install . -r requirements/doc.txt
          make -C docs html SPHINXOPTS=-W

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.11
      - name: Install packages
        run: pip install black mypy ruff types-cryptography
      - name: Run linters
        #           mypy src tests
        run: |
          ruff examples src tests
          black --check --diff examples src tests

  codespell:
    name: Check for spelling errors
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: codespell-project/actions-codespell@master
        with:
          check_filenames: true
          check_hidden: false
          ignore_words_list: quicly

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python:
          - "3.12"
          - "3.11"
          - "3.10"
          - "3.9"
          - "3.8"
          - "3.7"
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'true'
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
      - name: Disable firewall and configure compiler
        if: matrix.os == 'macos-latest'
        run: |
          sudo /usr/libexec/ApplicationFirewall/socketfilterfw --setglobalstate off
          echo "AIOQUIC_SKIP_TESTS=chacha20" >> $GITHUB_ENV
      - name: Run tests
        run: |
          python -m pip install -U pip setuptools wheel
          pip install .[dev]
          coverage run -m unittest discover -v
          coverage xml
        shell: bash
      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        if: matrix.python != 'pypy3'

  package-source:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'true'
      - uses: actions/setup-python@v4
        with:
          python-version: 3.7
      - name: Build source package
        run: |
          pip install -U build
          python -m build --sdist
      - name: Upload source package
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  package-wheel:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            arch: arm64
          - os: macos-latest
            arch: x86_64
          - os: ubuntu-latest
            arch: i686
          - os: ubuntu-latest
            arch: x86_64
          - os: windows-latest
            arch: AMD64
          - os: windows-latest
            arch: x86
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'true'
      - uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - name: Install QEMU
        if: matrix.os == 'ubuntu-latest'
        uses: docker/setup-qemu-action@v2
      - name: Build wheels
        env:
          CIBW_BUILD_FRONTEND: build
          CIBW_ARCHS: ${{ matrix.arch }}
          CIBW_ENVIRONMENT: AIOQUIC_SKIP_TESTS=ipv6,loss
          CIBW_BUILD: cp39-* pp310-* pp39-* pp38-*
          CIBW_TEST_COMMAND: python -m unittest discover -t {project} -s {project}/tests
          # there are no wheels for cryptography on these platforms
          CIBW_TEST_SKIP: "*-{manylinux_i686,win32} pp* *-musllinux*"
        run: |
          pip install cibuildwheel
          cibuildwheel --output-dir dist
